name: JQM CI

on: [push]

defaults:
    run:
        working-directory: ./jqm-all

jobs:
    # jdk_tests:
    #     runs-on: ubuntu-latest
    #     strategy:
    #         fail-fast: false
    #         matrix:
    #             java: [ 11, 12 ]
    #     steps:
    #         -   uses: actions/checkout@v2
    #         -   name: Set up java
    #                 uses: actions/setup-java@v1
    #                 with:
    #                     java-version: ${{ matrix.java }}
    #         -   name: Build
    #                 run: mvn install -DskipTests
    #         -   name: Test
    #                 run: mvn test
    #         -   name: Upload Unit Test Results
    #                 if: always()
    #                 uses: actions/upload-artifact@v2
    #                 with:
    #                     name: UnitTestResults(Java_${{ matrix.java }})
    #                     path: "**/TEST-*.xml"
    db_tests:
        runs-on: ubuntu-latest
        services:
            postgres:
                image: postgres
                env:
                    POSTGRES_PASSWORD: postgres
                # Set health checks to wait until postgres has started
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    # Maps tcp port 5432 on service container to the host
                    - 5432:5432
        steps:
            - uses: actions/checkout@v2
            - name: Set up java
              uses: actions/setup-java@v1
              with:
                  java-version: 11
            - name: Build
              run: mvn install -DskipTests
            - name: Test
              run: mvn test
            - name: Upload Unit Test Results
              if: always()
              uses: actions/upload-artifact@v2
              with:
                  name: UnitTestResults(Java_${{ matrix.java }})
                  path: "**/TEST-*.xml"
    publish-test-results:
        name: "Publish Unit Tests Results"
        needs: test
        runs-on: ubuntu-latest
        steps:
            - name: Download Artifacts
              uses: actions/download-artifact@v2
              with:
                  path: artifacts
            - name: Publish Test Report
              uses: EnricoMi/publish-unit-test-result-action@v1.7
              if: always()
              with:
                  files: "**/TEST-*.xml"
                  github_token: ${{ secrets.GITHUB_TOKEN }}
